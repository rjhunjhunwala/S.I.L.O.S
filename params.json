{
  "name": "S.i.l.o.s",
  "tagline": "S.I.L.O.S aka SIL the \"Simple Interpreted Language\" for a modern age. ",
  "body": "<h1>S.I.L.O.S</h1>\r\nS.I.L.O.S or SIL is designed for a nostalgic view of the past. It is simple and minimalistic, but remains capable of universal computation.\r\nFeel free to [try this language online]( http://silos.tryitonline.net/#code=cHJpbnQgU2ltcGxlIEludGVycHJldGVkIExhbmd1YWdl&input=)! The interpreter is hosted by Dennis Mitchell. \r\n<hr/>\r\n<h2> S.I.L.O.S </h2>\r\nS.I.L.O.S stands for.\r\n<pre>\r\n<b>S</b>uperb\r\n<b>I</b>nterpreted\r\n<b>L</b>anguage's\r\n<b>O</b>bviously\r\n<b>S</b>uperior\r\n</pre>\r\nIt is also known as SIL (Simple Interpreted Language)\r\n<h2> Syntax </h2>\r\nThe syntax is simple\r\n<pre>\r\n//One command per line\r\n//one letter variable names\r\n//Only type integer \r\n//No declaration needed they all start at 0\r\n//direct access to the memory array \r\na = get 5\r\nlblFoo\r\nGOTO Foo\r\nNo syntax checking\r\nVB like behavior allowing erros to pass unnoticed and unhandled\r\nif x Foo //goes to Foo iff x>0\r\na - b subtraction\r\na + b addition\r\na * b multiplication\r\na / b division\r\na % b modulus\r\na | //absolute value of a and reassigns this to \r\na ~ bitwise not\r\na < b left shift\r\na > b right shift\r\na & b bitwise and\r\na : b or\r\na ! b xor\r\na ? b xnor\r\na ^ b a raised to the b\r\n\r\n//all assignment operators x - 5 is the equivalent of x-=5 for those familiar with C styled languages\r\n</pre>\r\nThat is the basic syntax, note that as of this printing, integers are 32 bit signed integers [-1*2^31,2^31-1] which overflow and wrap around. \r\n</br>There is a plan to make them big numbers with unbounded size.\r\n<h2> Memory Buffer </h2>\r\n\r\nYou can directly write to the memory buffer like such\r\n<pre>\r\nset 288 57\r\n//acccesses the heap at 288 and sets it to 57\r\na = get 288\r\n//gets back what the thing at position 288\r\nprintInt a\r\nset a 88\r\n//sets the thing at position a to 88\r\nb = get a\r\n//gets the thing at position a and sets it in the value of b\r\nprintInt b\r\nprintIntNoLine a\r\nprintLine\r\na + 10\r\nb + 11\r\nset b a\r\n//sets what is at b's position to a\r\nc = get b\r\n//gets the number from above\r\nprintInt c\r\n</pre>\r\nRemember please be careful to not use any positions below 256 on the array as these can be used for ascii variable names, touch these at great peril\r\n<h2>IO</h2>\r\ninput and output is done like so\r\n<pre>readIO SOME PROMPT FOR THE USER</pre>\r\nthe magical interpreter thus prints out SOME PROMPT FOR THE USER  and stores the value in the variable i\r\nNOTE that for the onlne version it is imperative you avoid the use of this command. All prompts are disabled in the online version, so\r\n<pre>printLine SOME PROMPT</pre>\r\nand then\r\n<pre>readIO :</pre>\r\nPrinting is done with three commands\r\n<pre>printInt a\r\n//prints out the value of a with a trailing newline\r\nprintLine a\r\n//prints out \"a\" with a trailing newline\r\nprint a\r\n//prints out \"a\" with no trailing new line\r\nprintChar x prints out the value of x as a character\r\n</pre>\r\n\r\n<h2> Entropy </h2>                                                                                                                                                    \r\nthe randomness is provided by a prng currently the\r\nprng is provided courtesy of Oracle and uses the system time as a seed\r\n<pre>rand x</pre>\r\ngets a random number [0,x) 0 inclusive to max exclusive and stores it in the variable r\r\nmax may also be a literal like 12\r\n<h2> Functions </h2>\r\nSee the usage of functions in functions.txt to better comperehend it, but here is the basics. Function should be declared as\r\nsuch\r\n<pre>\r\nGOTO endOfAllFunctions\r\nfuncfunctionname\r\n//code the function here\r\nreturn\r\nfuncsomeFunc\r\nreturn\r\nlblendOfAllFunctions\r\n</pre>\r\nnow at any point in the code you may calll the function named functionname as such\r\n<pre>\r\nGOSUB functionname\r\n</pre>\r\nThe stack is automagically handled works similar to most languages. However one must  be cuatious of properly enclosing the function safely with returns.\r\nAlso ensure to jump around the functions with the Goto's otherwise all the functions will run.\r\n\r\nIdeally functions should have only one return statement.\r\n\r\nAs of this printing functions can only be void and have no return type. \r\n<h2> Style </h2>\r\nthe first line is used by the interpreter to allocate the size of the array (heap) this number should be at least 256\r\nif you omit this line the interpretter will just allocate 8192 slots in its memory for its future use\r\nyou are allowed to use single character identifiiers\r\n<pre>1 = 5\r\nprintInt 1\r\n//prints five\r\nprint 1\r\n//1</pre>\r\nBut never do this unless it is for obfuscation purposes the compiler will struggle with resolving what you are talking about\r\nalso as far as commenting goes the compiler will ignore non code thus\r\n<pre>\r\nthis is a comment\r\n</pre>\r\nis valid syntax\r\nbut don't abuse this as\r\n<pre>1 = foo</pre>\r\ncould break your code\r\ninstead // is recommended to start all comments\r\nlastly as input and randomness are stored into the variables i and r when requested it is recommended that you reserve these\r\nvariables for that use\r\nAs of 8/24/2016 SIL has new, improved input, here are the new features\r\n<pre>\r\n<h1>S.I.L.O.S 1.5</h1>\r\n//This shows the new features of SIL\r\ndef p print load loadLine : lbl\r\n//With the new \"illiterate preprocessor\" (tm) the above statement (which must appear on the second line) defines any number of macros in the form of def string replace string2 replace\r\n\r\np Hello,\r\npLine  World!\r\npSee\r\npLine!\r\na = 5\r\npInt a\r\n//loading the next line of stdin as a string is easy.\r\nload testing!\r\n//the loadLine command will take one line (either one single command line argument on TIO (Try it Online!), or STDIN on java and loads it in starting at the 256th heap spot and working out)\r\n//look the macro now will allow : to work as a label\r\na = 256\r\n:a\r\nx = get a\r\nprintInt x\r\nif x continue\r\nGOTO end\r\n:continue\r\npChar x\r\na + 1\r\nif x a\r\n:end\r\n</pre>\r\n<hr/>\r\n<h1>Graphics</h1> \r\nSupport for Graphical Output has been added in SILOS 2.0. SILOS 2.0 comes primarily with support for graphics, but also features I highly optimized interpreter (<b>thanks to  kckennylau!</b>), and a <pre>wait x</pre> command which as the name would suggest, waits x milliseconds. Now, let's take a look at how graphical output works. \r\n<pre>canvas width height wordForTheHeader</pre>\r\nYou first must use the above command to declare a canvas\r\nTHan you must decide to create objects\r\nEach object will be in the current pen color.\r\nTHe pen color gets set with \r\n<pre>pen r g b</pre> where r g and b are variables represent red green and blue values of a color (of any name) or integer literals.\r\nThan you can create an object\r\n<pre>newObj type height width</pre> a square is type 0 an elipse is type one. Height and width and type are all variables/integer literals. This will add a new object to the drawable list. This list is zero indexed.\r\n<pre>moveObj index x y</pre> will move an object to a designated location.\r\n<pre>refresh</pre> is a mandatory command to be invoked once you have moved the objects around. refresh is the only way to actually trigger the painting. \r\nPlease see the game.txt and gui.txt files in the examples folder for an explanation.\r\n<h1>Keyboard Bindings</h1\r\nAt any point you can place a binding to certain characters\r\n<pre>bind intRepresentingChar1 heapSpot1 intOfChar2 heapSpot2 etcetera</pre> Where intRepresentingChar is an integer literal or variable representing a char ((ascii convention used) 97 would mean 'a') and heapspot is an integer value of a valid spot on the heap. \r\nWhen the corresponding characters get typed (and a canvas has already been created) the corresponding heapspot will be set to one. <b>This feature only works on the desktop version when a canvas is in focus</b>\r\n<hr/>\r\n<h1>Whitespace</h1>\r\nMost whitespace dependency is gone. The only necessary whitespace separates arguments and the new lines between commands. \r\nAll lines are now indentable!\r\n<h2>Bitwise operators now have support. Please view the bitwise.txt document for a full rundown </h2>\r\n<h1><b>Please note that all interactivity including graphics support is unavailable on Try it Online! all input must be through command line arguments</b></h1>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}